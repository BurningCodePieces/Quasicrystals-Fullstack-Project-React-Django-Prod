from django.db import models
from accounts.models import UserAccount
import datetime
  
class Quasicrystal(models.Model):
    crystal_id = models.CharField(max_length=10)
    chemical_formula = models.CharField(max_length=100, blank=True, null=True)
    refined_formula = models.CharField(max_length=100, blank=True, null=True)
    distance_in_periodic_direction = models.DecimalField(max_digits=20, decimal_places=6, blank=True, null=True)
    edge_length = models.DecimalField(max_digits=20, decimal_places=6, blank=True, null=True)
    phasson_coefficient = models.DecimalField(max_digits=20, decimal_places=6, blank=True, null=True)
    residual_electron_density = models.DecimalField(max_digits=9, decimal_places=6, blank=True, null=True)
    point_density = models.DecimalField(max_digits=20, decimal_places=6, blank=True, null=True)
    number_of_electrons_per_atom = models.DecimalField(max_digits=20, decimal_places=6, blank=True, null=True)
    authors = models.CharField(max_length=1000, blank=True, null=True)
    title_of_publication = models.CharField(max_length=1000, blank=True, null=True)
    journal_of_publication = models.CharField(max_length=1000, blank=True, null=True)
    journal_volume = models.CharField(max_length=1000, blank=True, null=True)
    jounal_issue = models.CharField(max_length=1000, blank=True, null=True)
    year_of_publication = models.IntegerField(blank=True, null=True)
    start_page_or_page_range = models.CharField(max_length=50, blank=True, null=True)
    url_to_article = models.CharField(max_length=1000, blank=True, null=True)
    diffraction_temperature = models.DecimalField(max_digits=20, decimal_places=6, blank=True, null=True)
    radiation_type = models.CharField(max_length=1000, blank=True, null=True)
    diffraction_radiation_wavelength = models.DecimalField(max_digits=20, decimal_places=6, blank=True, null=True)
    number_of_observed_reflections = models.IntegerField(blank=True, null=True)
    number_of_unique_reflections = models.IntegerField(blank=True, null=True)
    rInt = models.DecimalField(max_digits=7, decimal_places=6, blank=True, null=True)
    r1_sigma = models.DecimalField(max_digits=7, decimal_places=6, blank=True, null=True)
    r3_sigma = models.DecimalField(max_digits=7, decimal_places=6, blank=True, null=True)
    wR1_sigma = models.DecimalField(max_digits=7, decimal_places=6, blank=True, null=True)
    wR3_sigma = models.DecimalField(max_digits=7, decimal_places=6, blank=True, null=True)
    number_of_reflections_1_sigma = models.IntegerField(blank=True, null=True)
    number_of_reflections_3_sigma = models.IntegerField(blank=True, null=True)
    number_of_parameters = models.IntegerField(blank=True, null=True)
    r_factor_value = models.DecimalField(max_digits=7, decimal_places=6, blank=True, null=True)
    is_valid = models.BooleanField(default=False)
    quasi_type = models.CharField(max_length=100,blank=True, null=True)
    centering_type = models.CharField(max_length=100,blank=True, null=True)
    cluster_type = models.CharField(max_length=100,blank=True, null=True)
    created_at = models.DateField(default=datetime.date.today)
    created_by = models.ForeignKey(UserAccount, on_delete=models.SET_NULL, null=True)
    five_dimensional_space_group = models.CharField(max_length=1000, blank=True, null=True)